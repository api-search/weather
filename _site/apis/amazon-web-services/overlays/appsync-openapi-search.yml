openapi: 3.1.0
info:
  title: appsync
paths:
  /v1/domainnames/{domainName}/apiassociation:
    GET:
      summary: 'Get Api Association '
      description: <p>Retrieves an <code>ApiAssociation</code> object.</p>
      tags:
        - APIs
        - Associations
        - Domain Names
        - Domains
        - Names
  /v1/sourceApis/{sourceApiIdentifier}/mergedApiAssociations:
    POST:
      summary: 'Associate Merged Graphql Api '
      description: >-
        <p>Creates an association between a Merged API and source API using the
        source API's identifier.</p>
      tags:
        - APIs
        - Associate
        - Associations
        - GraphQL
        - Identifiers
        - Merged
        - Source
  /v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations:
    POST:
      summary: 'Associate Source Graphql Api '
      description: >-
        <p>Creates an association between a Merged API and source API using the
        Merged API's identifier.</p>
      tags:
        - APIs
        - Associate
        - Associations
        - GraphQL
        - Identifiers
        - Merged
        - Source
  /v1/apis/{apiId}/ApiCaches:
    GET:
      summary: 'Get Api Cache '
      description: <p>Retrieves an <code>ApiCache</code> object.</p>
      tags:
        - APIs
        - Cache
        - Caches
        - Identifiers
  /v1/apis/{apiId}/apikeys:
    GET:
      summary: 'List Api Keys '
      description: >-
        <p>Lists the API keys for a given API.</p> <note> <p>API keys are
        deleted automatically 60 days after they expire. However, they may still
        be included in the response until they have actually been deleted. You
        can safely call <code>DeleteApiKey</code> to manually delete a key
        before it's automatically deleted.</p> </note>
      tags:
        - API Keys
        - APIs
        - Identifiers
        - Keys
        - Lists
  /v1/apis/{apiId}/datasources:
    GET:
      summary: 'List Data Sources '
      description: <p>Lists the data sources for a given API.</p>
      tags:
        - APIs
        - Data
        - Data Source
        - Identifiers
        - Lists
        - Sources
  /v1/domainnames:
    GET:
      summary: 'List Domain Names '
      description: <p>Lists multiple custom domain names.</p>
      tags:
        - Domains
        - Names
        - Names
        - null
        - Source
        - Merged
        - Associations
        - Caches
        - Keys
        - Data Source
        - null
        - Domain Names
  /v1/apis/{apiId}/functions:
    GET:
      summary: 'List Functions '
      description: <p>List multiple functions.</p>
      tags:
        - APIs
        - Functions
        - Identifiers
        - Lists
  /v1/apis:
    GET:
      summary: 'List Graphql Apis '
      description: <p>Lists your GraphQL APIs.</p>
      tags:
        - APIs
        - GraphQL
        - Lists
  /v1/apis/{apiId}/types/{typeName}/resolvers:
    GET:
      summary: 'List Resolvers '
      description: <p>Lists the resolvers for a given API and type.</p>
      tags:
        - APIs
        - Identifiers
        - Lists
        - Names
        - Resolvers
        - Types
  /v1/apis/{apiId}/types:
    GET:
      summary: 'List Types '
      description: <p>Lists the types for a given API.</p>
      tags:
        - APIs
        - Identifiers
        - Lists
        - Types
  /v1/apis/{apiId}/apikeys/{id}:
    POST:
      summary: UpdateApiKey
      description: >-
        <p>Updates an API key. You can update the key as long as it's not
        deleted.</p>
      tags:
        - Api
        - Apikeys
        - Apis
        - Id
        - Key
        - Update
        - V1
  /v1/apis/{apiId}/datasources/{name}:
    POST:
      summary: 'Update Data Source '
      description: <p>Updates a <code>DataSource</code> object.</p>
      tags:
        - ''
        - Associations
        - Caches
        - Data
        - Data Source
        - Domain Names
        - Functions
        - Keys
        - Merged
        - Names
        - Resolvers
        - Source
        - Types
  /v1/domainnames/{domainName}:
    POST:
      summary: 'Update Domain Name '
      description: <p>Updates a custom <code>DomainName</code> object.</p>
      tags:
        - Domain Names
        - Domains
        - Names
  /v1/apis/{apiId}/functions/{functionId}:
    POST:
      summary: 'Update Function '
      description: <p>Updates a <code>Function</code> object.</p>
      tags:
        - APIs
        - Functions
        - Identifiers
  /v1/apis/{apiId}:
    POST:
      summary: 'Update Graphql Api '
      description: <p>Updates a <code>GraphqlApi</code> object.</p>
      tags:
        - APIs
        - GraphQL
        - Identifiers
  /v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}:
    POST:
      summary: 'Update Resolver '
      description: <p>Updates a <code>Resolver</code> object.</p>
      tags:
        - APIs
        - Fields
        - Identifiers
        - Names
        - Resolvers
        - Types
  /v1/apis/{apiId}/types/{typeName}:
    POST:
      summary: 'Update Type '
      description: <p>Updates a <code>Type</code> object.</p>
      tags:
        - APIs
        - Identifiers
        - Names
        - Types
  /v1/sourceApis/{sourceApiIdentifier}/mergedApiAssociations/{associationId}:
    DELETE:
      summary: 'Disassociate Merged Graphql Api '
      description: >-
        <p>Deletes an association between a Merged API and source API using the
        source API's identifier and the association ID.</p>
      tags:
        - APIs
        - Associations
        - Disassociate
        - GraphQL
        - Identifiers
        - Merged
        - Source
  /v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}:
    POST:
      summary: 'Update Source Api Association '
      description: >-
        <p>Updates some of the configuration choices of a particular source API
        association.</p>
      tags:
        - APIs
        - Associations
        - Identifiers
        - Merged
        - Source
  /v1/dataplane-evaluatecode:
    POST:
      summary: 'Evaluate Code '
      description: >-
        <p>Evaluates the given code and returns the response. The code
        definition requirements depend on the specified runtime. For
        <code>APPSYNC_JS</code> runtimes, the code defines the request and
        response functions. The request function takes the incoming request
        after a GraphQL operation is parsed and converts it into a request
        configuration for the selected data source operation. The response
        function interprets responses from the data source and maps it to the
        shape of the GraphQL field output type. </p>
      tags:
        - Code
        - Data Planes
        - Evaluate
        - Evaluate Code
  /v1/dataplane-evaluatetemplate:
    POST:
      summary: 'Evaluate Mapping Template '
      description: >-
        <p>Evaluates a given template and returns the response. The mapping
        template can be a request or response template.</p> <p>Request templates
        take the incoming request after a GraphQL operation is parsed and
        convert it into a request configuration for the selected data source
        operation. Response templates interpret responses from the data source
        and map it to the shape of the GraphQL field output type.</p> <p>Mapping
        templates are written in the Apache Velocity Template Language
        (VTL).</p>
      tags:
        - Data Planes
        - Evaluate
        - Evaluate Template
        - Mapping
        - Templates
  /v1/apis/{apiId}/FlushCache:
    DELETE:
      summary: 'Flush Api Cache '
      description: <p>Flushes an <code>ApiCache</code> object.</p>
      tags:
        - APIs
        - Cache
        - Flush
        - Identifiers
  /v1/datasources/introspections/{introspectionId}:
    GET:
      summary: 'Get Data Source Introspection '
      description: >-
        <p>Retrieves the record of an existing introspection. If the retrieval
        is successful, the result of the instrospection will also be returned.
        If the retrieval fails the operation, an error message will be returned
        instead.</p>
      tags:
        - Data
        - Data Source
        - Identifiers
        - Introspections
        - Source
  /v1/apis/{apiId}/environmentVariables:
    PUT:
      summary: 'Put Graphql Api Environment Variables '
      description: >-
        <p>Creates a list of environmental variables in an API by its ID value.
        </p> <p>When creating an environmental variable, it must follow the
        constraints below:</p> <ul> <li> <p>Both JavaScript and VTL templates
        support environmental variables.</p> </li> <li> <p>Environmental
        variables are not evaluated before function invocation.</p> </li> <li>
        <p>Environmental variables only support string values.</p> </li> <li>
        <p>Any defined value in an environmental variable is considered a string
        literal and not expanded.</p> </li> <li> <p>Variable evaluations should
        ideally be performed in the function code.</p> </li> </ul> <p>When
        creating an environmental variable key-value pair, it must follow the
        additional constraints below:</p> <ul> <li> <p>Keys must begin with a
        letter.</p> </li> <li> <p>Keys must be at least two characters long.</p>
        </li> <li> <p>Keys can only contain letters, numbers, and the underscore
        character (_).</p> </li> <li> <p>Values can be up to 512 characters
        long.</p> </li> <li> <p>You can configure up to 50 key-value pairs in a
        GraphQL API.</p> </li> </ul> <p>You can create a list of environmental
        variables by adding it to the <code>environmentVariables</code> payload
        as a list in the format <code>{"key1":"value1","key2":"value2",
        â€¦}</code>. Note that each call of the
        <code>PutGraphqlApiEnvironmentVariables</code> action will result in the
        overwriting of the existing environmental variable list of that API.
        This means the existing environmental variables will be lost. To avoid
        this, you must include all existing and new environmental variables in
        the list each time you call this action.</p>
      tags:
        - APIs
        - Environments
        - GraphQL
        - Identifiers
        - Variables
  /v1/apis/{apiId}/schema:
    GET:
      summary: 'Get Introspection Schema '
      description: <p>Retrieves the introspection schema for a GraphQL API.</p>
      tags:
        - APIs
        - Identifiers
        - Introspections
        - Schemas
  /v1/apis/{apiId}/schemacreation:
    POST:
      summary: 'Start Schema Creation '
      description: >-
        <p>Adds a new schema to your GraphQL API.</p> <p>This operation is
        asynchronous. Use to determine when it has completed.</p>
      tags:
        - APIs
        - Creation
        - Identifiers
        - Schemas
  /v1/apis/{apiId}/functions/{functionId}/resolvers:
    GET:
      summary: 'List Resolvers By Function '
      description: <p>List the resolvers that are associated with a specific function.</p>
      tags:
        - APIs
        - Functions
        - Identifiers
        - Lists
        - Resolvers
  /v1/apis/{apiId}/sourceApiAssociations:
    GET:
      summary: 'List Source Api Associations '
      description: <p>Lists the <code>SourceApiAssociationSummary</code> data.</p>
      tags:
        - APIs
        - Associations
        - Identifiers
        - Lists
        - Source
  /v1/tags/{resourceArn}:
    DELETE:
      summary: 'Untag Resource '
      description: <p>Untags a resource.</p>
      tags:
        - ARN
        - Resources
        - Tags
        - Untag
  /v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}/types:
    GET:
      summary: 'List Types By Association '
      description: <p>Lists <code>Type</code> objects by the source API association ID.</p>
      tags:
        - APIs
        - Associations
        - Identifiers
        - Lists
        - Merged
        - Source
        - Types
  /v1/datasources/introspections:
    POST:
      summary: 'Start Data Source Introspection '
      description: >-
        <p>Creates a new introspection. Returns the <code>introspectionId</code>
        of the new introspection after its creation. </p>
      tags:
        - Data
        - Data Source
        - Introspections
        - Source
  /v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}/merge:
    POST:
      summary: 'Start Schema Merge '
      description: >-
        <p>Initiates a merge operation. Returns a status that shows the result
        of the merge operation.</p>
      tags:
        - APIs
        - Associations
        - Identifiers
        - Merge
        - Merged
        - Schemas
        - Source
  /v1/apis/{apiId}/ApiCaches/update:
    POST:
      summary: 'Update Api Cache '
      description: ''
      tags:
        - APIs
        - Cache
        - Caches
        - Identifiers
