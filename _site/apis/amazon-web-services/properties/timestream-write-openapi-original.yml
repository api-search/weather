openapi: 3.1.0
info:
  title: timestream-write
  description: >-
    <fullname>Amazon Timestream Write</fullname> <p>Amazon Timestream is a fast,
    scalable, fully managed time-series database service that makes it easy to
    store and analyze trillions of time-series data points per day. With
    Timestream, you can easily store and analyze IoT sensor data to derive
    insights from your IoT applications. You can analyze industrial telemetry to
    streamline equipment management and maintenance. You can also store and
    analyze log data and metrics to improve the performance and availability of
    your applications. </p> <p>Timestream is built from the ground up to
    effectively ingest, process, and store time-series data. It organizes data
    to optimize query processing. It automatically scales based on the volume of
    data ingested and on the query volume to ensure you receive optimal
    performance while inserting and querying data. As your data grows over time,
    Timestream’s adaptive query processing engine spans across storage tiers to
    provide fast analysis while reducing costs.</p>
paths:
  /:
    POST:
      summary: WriteRecords
      description: >-
        <p>Enables you to write your time-series data into Timestream. You can
        specify a single data point or a batch of data points to be inserted
        into the system. Timestream offers you a flexible schema that auto
        detects the column names and data types for your Timestream tables based
        on the dimension names and data types of the data points you specify
        when invoking writes into the database. </p> <p>Timestream supports
        eventual consistency read semantics. This means that when you query data
        immediately after writing a batch of data into Timestream, the query
        results might not reflect the results of a recently completed write
        operation. The results may also include some stale data. If you repeat
        the query request after a short time, the results should return the
        latest data. <a
        href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html">Service
        quotas apply</a>. </p> <p>See <a
        href="https://docs.aws.amazon.com/timestream/latest/developerguide/code-samples.write.html">code
        sample</a> for details.</p> <p> <b>Upserts</b> </p> <p>You can use the
        <code>Version</code> parameter in a <code>WriteRecords</code> request to
        update data points. Timestream tracks a version number with each record.
        <code>Version</code> defaults to <code>1</code> when it's not specified
        for the record in the request. Timestream updates an existing record’s
        measure value along with its <code>Version</code> when it receives a
        write request with a higher <code>Version</code> number for that record.
        When it receives an update request where the measure value is the same
        as that of the existing record, Timestream still updates
        <code>Version</code>, if it is greater than the existing value of
        <code>Version</code>. You can update a data point as many times as
        desired, as long as the value of <code>Version</code> continuously
        increases. </p> <p> For example, suppose you write a new record without
        indicating <code>Version</code> in the request. Timestream stores this
        record, and set <code>Version</code> to <code>1</code>. Now, suppose you
        try to update this record with a <code>WriteRecords</code> request of
        the same record with a different measure value but, like before, do not
        provide <code>Version</code>. In this case, Timestream will reject this
        update with a <code>RejectedRecordsException</code> since the updated
        record’s version is not greater than the existing value of Version. </p>
        <p>However, if you were to resend the update request with
        <code>Version</code> set to <code>2</code>, Timestream would then
        succeed in updating the record’s value, and the <code>Version</code>
        would be set to <code>2</code>. Next, suppose you sent a
        <code>WriteRecords</code> request with this same record and an identical
        measure value, but with <code>Version</code> set to <code>3</code>. In
        this case, Timestream would only update <code>Version</code> to
        <code>3</code>. Any further updates would need to send a version number
        greater than <code>3</code>, or the update requests would receive a
        <code>RejectedRecordsException</code>. </p>
tags: []
