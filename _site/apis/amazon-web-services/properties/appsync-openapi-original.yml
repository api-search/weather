openapi: 3.1.0
info:
  title: appsync
  description: >-
    <p>AppSync provides API actions for creating and interacting with data
    sources using GraphQL from your application.</p>
paths:
  /v1/domainnames/{domainName}/apiassociation:
    GET:
      summary: GetApiAssociation
      description: <p>Retrieves an <code>ApiAssociation</code> object.</p>
  /v1/sourceApis/{sourceApiIdentifier}/mergedApiAssociations:
    POST:
      summary: AssociateMergedGraphqlApi
      description: >-
        <p>Creates an association between a Merged API and source API using the
        source API's identifier.</p>
  /v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations:
    POST:
      summary: AssociateSourceGraphqlApi
      description: >-
        <p>Creates an association between a Merged API and source API using the
        Merged API's identifier.</p>
  /v1/apis/{apiId}/ApiCaches:
    GET:
      summary: GetApiCache
      description: <p>Retrieves an <code>ApiCache</code> object.</p>
  /v1/apis/{apiId}/apikeys:
    GET:
      summary: ListApiKeys
      description: >-
        <p>Lists the API keys for a given API.</p> <note> <p>API keys are
        deleted automatically 60 days after they expire. However, they may still
        be included in the response until they have actually been deleted. You
        can safely call <code>DeleteApiKey</code> to manually delete a key
        before it's automatically deleted.</p> </note>
  /v1/apis/{apiId}/datasources:
    GET:
      summary: ListDataSources
      description: <p>Lists the data sources for a given API.</p>
  /v1/domainnames:
    GET:
      summary: ListDomainNames
      description: <p>Lists multiple custom domain names.</p>
  /v1/apis/{apiId}/functions:
    GET:
      summary: ListFunctions
      description: <p>List multiple functions.</p>
  /v1/apis:
    GET:
      summary: ListGraphqlApis
      description: <p>Lists your GraphQL APIs.</p>
  /v1/apis/{apiId}/types/{typeName}/resolvers:
    GET:
      summary: ListResolvers
      description: <p>Lists the resolvers for a given API and type.</p>
  /v1/apis/{apiId}/types:
    GET:
      summary: ListTypes
      description: <p>Lists the types for a given API.</p>
  /v1/apis/{apiId}/apikeys/{id}:
    POST:
      summary: UpdateApiKey
      description: >-
        <p>Updates an API key. You can update the key as long as it's not
        deleted.</p>
  /v1/apis/{apiId}/datasources/{name}:
    POST:
      summary: UpdateDataSource
      description: <p>Updates a <code>DataSource</code> object.</p>
  /v1/domainnames/{domainName}:
    POST:
      summary: UpdateDomainName
      description: <p>Updates a custom <code>DomainName</code> object.</p>
  /v1/apis/{apiId}/functions/{functionId}:
    POST:
      summary: UpdateFunction
      description: <p>Updates a <code>Function</code> object.</p>
  /v1/apis/{apiId}:
    POST:
      summary: UpdateGraphqlApi
      description: <p>Updates a <code>GraphqlApi</code> object.</p>
  /v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}:
    POST:
      summary: UpdateResolver
      description: <p>Updates a <code>Resolver</code> object.</p>
  /v1/apis/{apiId}/types/{typeName}:
    POST:
      summary: UpdateType
      description: <p>Updates a <code>Type</code> object.</p>
  /v1/sourceApis/{sourceApiIdentifier}/mergedApiAssociations/{associationId}:
    DELETE:
      summary: DisassociateMergedGraphqlApi
      description: >-
        <p>Deletes an association between a Merged API and source API using the
        source API's identifier and the association ID.</p>
  /v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}:
    POST:
      summary: UpdateSourceApiAssociation
      description: >-
        <p>Updates some of the configuration choices of a particular source API
        association.</p>
  /v1/dataplane-evaluatecode:
    POST:
      summary: EvaluateCode
      description: >-
        <p>Evaluates the given code and returns the response. The code
        definition requirements depend on the specified runtime. For
        <code>APPSYNC_JS</code> runtimes, the code defines the request and
        response functions. The request function takes the incoming request
        after a GraphQL operation is parsed and converts it into a request
        configuration for the selected data source operation. The response
        function interprets responses from the data source and maps it to the
        shape of the GraphQL field output type. </p>
  /v1/dataplane-evaluatetemplate:
    POST:
      summary: EvaluateMappingTemplate
      description: >-
        <p>Evaluates a given template and returns the response. The mapping
        template can be a request or response template.</p> <p>Request templates
        take the incoming request after a GraphQL operation is parsed and
        convert it into a request configuration for the selected data source
        operation. Response templates interpret responses from the data source
        and map it to the shape of the GraphQL field output type.</p> <p>Mapping
        templates are written in the Apache Velocity Template Language
        (VTL).</p>
  /v1/apis/{apiId}/FlushCache:
    DELETE:
      summary: FlushApiCache
      description: <p>Flushes an <code>ApiCache</code> object.</p>
  /v1/datasources/introspections/{introspectionId}:
    GET:
      summary: GetDataSourceIntrospection
      description: >-
        <p>Retrieves the record of an existing introspection. If the retrieval
        is successful, the result of the instrospection will also be returned.
        If the retrieval fails the operation, an error message will be returned
        instead.</p>
  /v1/apis/{apiId}/environmentVariables:
    PUT:
      summary: PutGraphqlApiEnvironmentVariables
      description: >-
        <p>Creates a list of environmental variables in an API by its ID value.
        </p> <p>When creating an environmental variable, it must follow the
        constraints below:</p> <ul> <li> <p>Both JavaScript and VTL templates
        support environmental variables.</p> </li> <li> <p>Environmental
        variables are not evaluated before function invocation.</p> </li> <li>
        <p>Environmental variables only support string values.</p> </li> <li>
        <p>Any defined value in an environmental variable is considered a string
        literal and not expanded.</p> </li> <li> <p>Variable evaluations should
        ideally be performed in the function code.</p> </li> </ul> <p>When
        creating an environmental variable key-value pair, it must follow the
        additional constraints below:</p> <ul> <li> <p>Keys must begin with a
        letter.</p> </li> <li> <p>Keys must be at least two characters long.</p>
        </li> <li> <p>Keys can only contain letters, numbers, and the underscore
        character (_).</p> </li> <li> <p>Values can be up to 512 characters
        long.</p> </li> <li> <p>You can configure up to 50 key-value pairs in a
        GraphQL API.</p> </li> </ul> <p>You can create a list of environmental
        variables by adding it to the <code>environmentVariables</code> payload
        as a list in the format <code>{"key1":"value1","key2":"value2",
        â€¦}</code>. Note that each call of the
        <code>PutGraphqlApiEnvironmentVariables</code> action will result in the
        overwriting of the existing environmental variable list of that API.
        This means the existing environmental variables will be lost. To avoid
        this, you must include all existing and new environmental variables in
        the list each time you call this action.</p>
  /v1/apis/{apiId}/schema:
    GET:
      summary: GetIntrospectionSchema
      description: <p>Retrieves the introspection schema for a GraphQL API.</p>
  /v1/apis/{apiId}/schemacreation:
    POST:
      summary: StartSchemaCreation
      description: >-
        <p>Adds a new schema to your GraphQL API.</p> <p>This operation is
        asynchronous. Use to determine when it has completed.</p>
  /v1/apis/{apiId}/functions/{functionId}/resolvers:
    GET:
      summary: ListResolversByFunction
      description: <p>List the resolvers that are associated with a specific function.</p>
  /v1/apis/{apiId}/sourceApiAssociations:
    GET:
      summary: ListSourceApiAssociations
      description: <p>Lists the <code>SourceApiAssociationSummary</code> data.</p>
  /v1/tags/{resourceArn}:
    DELETE:
      summary: UntagResource
      description: <p>Untags a resource.</p>
  /v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}/types:
    GET:
      summary: ListTypesByAssociation
      description: <p>Lists <code>Type</code> objects by the source API association ID.</p>
  /v1/datasources/introspections:
    POST:
      summary: StartDataSourceIntrospection
      description: >-
        <p>Creates a new introspection. Returns the <code>introspectionId</code>
        of the new introspection after its creation. </p>
  /v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}/merge:
    POST:
      summary: StartSchemaMerge
      description: >-
        <p>Initiates a merge operation. Returns a status that shows the result
        of the merge operation.</p>
  /v1/apis/{apiId}/ApiCaches/update:
    POST:
      summary: UpdateApiCache
      description: <p>Updates the cache for the GraphQL API.</p>
tags: []
